/*
 * This program and the accompanying materials 
 * are made available under the terms of the Eclipse Public License v1.0
 * which is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */

package org.eclipse.datatools.sqltools.parsers.sql.lexer;

public class SQLLexerprs implements lpg.lpgjavaruntime.ParseTable, SQLLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,2,1,2,2,4,3,2,1,2,
            3,2,1,2,1,1,1,1,2,3,
            1,2,2,2,1,2,2,3,2,3,
            3,6,1,0,3,3,2,0,1,2,
            3,2,0,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,2,2,2,2,2,2,2,2,
            2,2,2,2,2,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2,
            1,1,1,1,1,1,1,2,1,1,
            2,1,1,3,3,1,2,1
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            22,22,23,23,23,23,23,23,23,23,
            23,23,23,23,23,23,30,24,38,38,
            32,12,12,11,11,11,36,25,25,13,
            13,39,39,40,40,26,26,41,5,5,
            42,43,43,27,27,27,44,44,44,16,
            16,16,28,10,10,45,45,45,45,46,
            46,29,48,48,4,4,4,4,4,2,
            2,2,2,2,2,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,1,1,1,1,1,1,1,1,1,
            1,18,18,18,18,18,18,15,15,37,
            37,37,37,37,37,37,37,37,37,37,
            37,37,37,37,37,37,37,37,37,37,
            37,37,37,37,37,37,50,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,21,21,21,21,
            21,21,21,21,21,21,21,21,21,21,
            21,21,21,21,21,21,21,21,21,21,
            21,21,21,21,21,21,7,7,7,7,
            7,7,7,7,7,7,7,7,7,7,
            7,7,7,7,7,7,7,7,7,7,
            7,7,7,7,7,7,7,47,47,47,
            47,17,17,17,17,8,8,49,49,49,
            49,49,49,49,49,49,14,14,14,14,
            14,6,6,6,6,6,6,6,6,6,
            6,9,31,31,31,31,33,34,35,791,
            38,23,69,21,364,870,25,24,69,8,
            315,326,918,25,24,69,1179,1113,39,783,
            22,329,1,2,3,4,5,6,7,9,
            10,11,12,13,14,15,16,17,19,868,
            35,36,1188,379,1,292,291,69,1189,132,
            29,293,295,296,1044,39,605,391,161,292,
            291,69,1027,117,29,293,295,296,604,968,
            44,409,321,287,286,69,289,42,1135,39,
            118,81,292,291,69,43,33,30,293,295,
            296,1146,39,288,477,272,271,69,274,241,
            292,291,69,1192,435,30,293,295,296,1157,
            39,57,425,404,273,399,287,286,69,289,
            713,268,267,69,270,555,278,277,69,34,
            635,272,271,69,274,1182,288,1010,117,269,
            440,1168,39,962,281,23,69,55,966,1181,
            273,1089,41,21,322,118,1183,1067,38,52,
            22,466,327,1056,38,1078,38,56,388,865,
            401,1124,38,888,62,1180,419,1124,38,1093,
            372,1187,451,1094,914,1190,1194,862,1196,1197,
            502,502
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,0,0,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,0,71,72,73,74,75,76,77,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,0,80,0,0,0,0,0,78,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,19,0,19,0,
            0,0,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,0,45,46,47,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,70,0,19,0,0,52,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,0,45,46,47,0,0,0,0,0,
            57,58,11,12,13,14,15,16,11,0,
            19,0,0,18,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            39,40,41,42,43,0,45,46,47,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,0,1,2,3,4,5,6,
            7,8,9,10,11,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,9,10,0,1,2,
            3,4,5,6,7,8,9,10,0,0,
            0,0,0,0,0,0,0,0,55,0,
            0,0,0,0,0,0,18,52,20,17,
            17,56,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,9,10,0,1,2,3,4,5,
            6,7,8,9,10,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,9,10,0,1,2,
            3,4,5,6,7,8,9,10,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,21,
            22,21,22,21,22,18,18,20,20,18,
            17,20,17,17,0,0,0,0,0,0,
            0,0,44,0,44,0,44,49,50,49,
            50,49,50,54,53,48,48,51,0,48,
            51,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            502,603,604,605,606,607,608,609,610,611,
            612,581,577,578,579,580,582,493,764,600,
            763,801,802,583,584,585,586,587,588,589,
            590,591,592,593,594,595,596,597,598,599,
            601,602,572,576,796,575,574,573,762,777,
            778,766,739,754,759,761,738,741,742,765,
            767,745,747,750,751,752,757,758,760,740,
            743,744,748,746,749,753,755,756,768,799,
            502,603,604,605,606,607,608,609,610,611,
            612,581,577,578,579,580,582,496,764,600,
            763,801,802,583,584,585,586,587,588,589,
            590,591,592,593,594,595,596,597,598,599,
            601,602,572,576,796,575,574,573,762,777,
            778,766,739,754,759,761,738,741,742,765,
            767,745,747,750,751,752,757,758,760,740,
            743,744,748,746,749,753,755,756,768,799,
            502,603,604,605,606,607,608,609,610,611,
            612,581,577,578,579,580,582,498,764,600,
            763,801,802,583,584,585,586,587,588,589,
            590,591,592,593,594,595,596,597,598,599,
            601,602,572,576,796,575,574,573,762,777,
            778,766,739,754,759,761,738,741,742,765,
            767,745,747,750,751,752,757,758,760,740,
            743,744,748,746,749,753,755,756,768,799,
            502,603,604,605,606,607,608,609,610,611,
            612,581,577,578,579,580,582,499,764,600,
            763,801,802,583,584,585,586,587,588,589,
            590,591,592,593,594,595,596,597,598,599,
            601,602,572,576,796,575,574,573,762,777,
            778,766,739,754,759,761,738,741,742,765,
            767,745,747,750,751,752,757,758,760,740,
            743,744,748,746,749,753,755,756,768,799,
            502,603,604,605,606,607,608,609,610,611,
            612,581,577,578,579,580,582,723,735,600,
            734,569,570,583,584,585,586,587,588,589,
            590,591,592,593,594,595,596,597,598,599,
            601,602,572,576,566,575,574,573,733,567,
            568,491,709,725,730,732,708,711,712,736,
            737,715,717,720,721,722,728,729,731,710,
            713,714,718,716,719,724,726,727,502,603,
            604,605,606,607,608,609,610,611,612,581,
            577,578,579,580,582,723,735,600,734,569,
            570,583,584,585,586,587,588,589,590,591,
            592,593,594,595,596,597,598,599,601,602,
            572,576,566,575,574,573,733,567,568,495,
            709,725,730,732,708,711,712,736,737,715,
            717,720,721,722,728,729,731,710,713,714,
            718,716,719,724,726,727,502,603,604,605,
            606,607,608,609,610,611,612,581,577,578,
            579,580,582,692,704,600,703,569,570,583,
            584,585,586,587,588,589,590,591,592,593,
            594,595,596,597,598,599,601,602,572,576,
            566,575,574,573,702,567,568,706,680,694,
            699,701,679,681,682,705,707,684,686,689,
            690,691,697,698,700,430,561,683,687,685,
            688,693,695,696,61,603,604,605,606,607,
            608,609,610,611,612,581,577,578,579,580,
            582,663,675,600,674,784,785,583,584,585,
            586,587,588,589,590,591,592,593,594,595,
            596,597,598,599,601,602,572,576,781,575,
            574,573,673,58,63,677,650,665,670,672,
            649,652,653,676,678,655,657,660,661,662,
            668,669,671,651,782,654,658,656,659,664,
            666,667,787,786,502,603,604,605,606,607,
            608,609,610,611,612,581,577,578,579,580,
            582,692,704,600,703,569,570,583,584,585,
            586,587,588,589,590,591,592,593,594,595,
            596,597,598,599,601,602,572,576,566,575,
            574,573,702,567,568,706,680,694,699,701,
            679,681,682,705,707,684,686,689,690,691,
            697,698,700,459,562,683,687,685,688,693,
            695,696,502,603,604,605,606,607,608,609,
            610,611,612,581,577,578,579,580,582,663,
            675,600,674,569,570,583,584,585,586,587,
            588,589,590,591,592,593,594,595,596,597,
            598,599,601,602,572,576,566,575,574,573,
            673,567,568,677,650,665,670,672,649,652,
            653,676,678,655,657,660,661,662,668,669,
            671,651,502,654,658,656,659,664,666,667,
            54,349,604,605,606,607,608,609,610,611,
            612,581,577,578,579,580,582,354,627,489,
            458,569,570,583,584,585,586,587,588,589,
            590,591,592,593,594,595,596,597,598,599,
            601,602,572,576,566,575,574,573,461,567,
            568,382,483,445,485,467,621,625,626,810,
            453,413,358,352,629,630,804,805,628,479,
            623,298,501,502,122,502,502,101,808,18,
            603,604,605,606,607,608,609,610,611,612,
            581,577,578,579,580,582,447,120,600,502,
            502,502,583,584,585,586,587,588,589,590,
            591,592,593,594,595,596,597,598,599,601,
            602,572,576,502,575,574,573,307,603,604,
            605,606,607,608,609,610,611,612,581,577,
            578,579,580,582,378,502,600,502,502,366,
            583,584,585,586,587,588,589,590,591,592,
            593,594,595,596,597,598,599,601,602,572,
            576,502,575,574,573,131,502,45,502,502,
            806,807,581,577,578,579,580,582,473,502,
            600,502,502,636,583,584,585,586,587,588,
            589,590,591,592,593,594,595,596,597,598,
            599,601,602,572,576,502,575,574,573,502,
            603,604,605,606,607,608,609,610,611,612,
            617,613,614,615,616,618,40,603,604,605,
            606,607,608,609,610,611,612,617,613,614,
            615,616,618,37,603,604,605,606,607,608,
            609,610,611,612,473,502,603,604,605,606,
            607,608,609,610,611,612,146,603,604,605,
            606,607,608,609,610,611,612,47,603,604,
            605,606,607,608,609,610,611,612,130,502,
            502,502,98,28,502,502,502,502,475,502,
            502,502,502,502,502,502,635,487,637,368,
            497,481,46,603,604,605,606,607,608,609,
            610,611,612,502,603,604,605,606,607,608,
            609,610,611,612,49,603,604,605,606,607,
            608,609,610,611,612,48,603,604,605,606,
            607,608,609,610,611,612,51,603,604,605,
            606,607,608,609,610,611,612,50,603,604,
            605,606,607,608,609,610,611,612,20,129,
            54,502,53,502,502,502,32,502,502,31,
            502,502,502,27,502,502,26,502,502,569,
            570,569,570,569,570,645,642,646,643,639,
            497,640,497,497,502,502,502,502,502,502,
            502,502,566,502,566,502,566,567,568,567,
            568,567,568,494,638,647,644,792,502,641,
            792
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 53,
           NT_OFFSET         = 80,
           LA_STATE_OFFSET   = 810,
           MAX_LA            = 2147483647,
           NUM_RULES         = 308,
           NUM_NONTERMINALS  = 51,
           NUM_SYMBOLS       = 131,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 309,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 81,
           ACCEPT_ACTION     = 501,
           ERROR_ACTION      = 502;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
