/*
 * This program and the accompanying materials 
 * are made available under the terms of the Eclipse Public License v1.0
 * which is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */

package org.eclipse.datatools.sqltools.parsers.sql.lexer;

public class SQLLexerprs implements lpg.lpgjavaruntime.ParseTable, SQLLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            2,1,2,2,4,3,2,1,2,3,
            2,1,2,1,1,1,1,2,3,1,
            2,2,2,1,2,2,3,2,3,3,
            6,1,0,3,3,2,0,1,2,3,
            2,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,2,2,2,2,2,2,
            2,2,2,2,2,2,2,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,2,1,1,1,1,1,1,1,1,
            1,2,1,1,3,3,1,2,1
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            23,23,24,24,24,24,24,24,24,24,
            24,24,24,24,24,31,25,38,38,12,
            13,13,11,11,11,36,26,26,14,14,
            39,39,40,40,27,27,41,5,5,42,
            43,43,28,28,28,44,44,44,17,17,
            17,29,10,10,45,45,45,45,46,46,
            30,48,48,4,4,4,4,4,2,2,
            2,2,2,2,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            1,1,1,1,1,1,1,1,1,1,
            19,19,19,19,19,19,16,16,37,37,
            37,37,37,37,37,37,37,37,37,37,
            37,37,37,37,37,37,37,37,37,37,
            37,37,37,37,37,37,37,37,50,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,21,
            21,21,21,21,21,21,21,21,21,21,
            21,21,21,21,21,21,21,21,21,21,
            21,21,21,21,21,21,21,21,22,22,
            22,22,22,22,22,22,22,22,22,22,
            22,22,22,22,22,22,22,22,22,22,
            22,22,22,22,22,22,22,22,7,7,
            7,7,7,7,7,7,7,7,7,7,
            7,7,7,7,7,7,7,7,7,7,
            7,7,7,7,7,7,7,7,7,47,
            47,47,47,18,18,18,18,8,8,49,
            49,49,49,49,49,49,49,49,15,15,
            15,15,15,6,6,6,6,6,6,6,
            6,6,9,32,32,32,32,33,34,35,
            791,37,22,68,20,461,870,24,23,68,
            8,316,52,328,915,24,23,68,1174,1108,
            38,606,21,350,1,2,3,4,5,6,
            7,9,10,11,12,13,14,15,16,18,
            786,34,35,966,353,1,294,293,68,607,
            134,28,295,297,298,161,294,293,68,385,
            42,28,295,297,298,868,396,1130,38,403,
            321,289,288,68,291,81,294,293,68,1141,
            38,29,295,297,298,32,477,274,273,68,
            276,1177,290,241,294,293,68,437,1184,29,
            295,297,298,1189,56,1152,38,275,1163,38,
            421,399,289,288,68,291,713,270,269,68,
            272,635,274,273,68,276,33,555,280,279,
            68,1185,431,290,1005,116,271,962,960,54,
            22,68,275,1084,1181,1022,116,283,20,324,
            40,1039,38,117,51,888,52,328,1187,1186,
            1086,41,1176,55,117,1062,37,1088,43,1178,
            329,1183,1089,1051,37,1175,61,455,377,1073,
            37,1119,37,1179,389,505,415,1119,37,505,
            505,505,418,505,505
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,0,0,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,0,74,75,76,77,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,0,80,0,0,78,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,19,0,19,0,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,0,0,19,0,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,0,
            73,0,0,0,0,0,0,0,0,0,
            11,12,13,14,15,16,11,0,19,18,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,0,1,
            2,3,4,5,6,7,8,9,10,11,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,0,0,0,0,0,0,
            0,0,0,55,0,0,0,0,0,0,
            50,18,17,20,17,17,56,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,17,0,0,18,17,20,0,0,0,
            0,18,0,20,0,0,18,0,20,0,
            0,0,0,0,0,0,0,0,0,46,
            47,45,49,48,51,52,46,47,45,49,
            48,51,52,45,57,58,50,53,0,54,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            505,605,606,607,608,609,610,611,612,613,
            614,583,579,580,581,582,584,477,769,602,
            768,585,586,587,588,589,590,591,592,593,
            594,595,596,597,598,599,600,601,603,604,
            574,578,577,576,575,767,805,806,771,801,
            744,782,783,759,764,766,743,746,747,770,
            772,753,750,752,754,755,756,757,758,762,
            763,765,745,748,749,751,760,761,773,804,
            505,605,606,607,608,609,610,611,612,613,
            614,583,579,580,581,582,584,482,769,602,
            768,585,586,587,588,589,590,591,592,593,
            594,595,596,597,598,599,600,601,603,604,
            574,578,577,576,575,767,805,806,771,801,
            744,782,783,759,764,766,743,746,747,770,
            772,753,750,752,754,755,756,757,758,762,
            763,765,745,748,749,751,760,761,773,804,
            505,605,606,607,608,609,610,611,612,613,
            614,583,579,580,581,582,584,485,769,602,
            768,585,586,587,588,589,590,591,592,593,
            594,595,596,597,598,599,600,601,603,604,
            574,578,577,576,575,767,805,806,771,801,
            744,782,783,759,764,766,743,746,747,770,
            772,753,750,752,754,755,756,757,758,762,
            763,765,745,748,749,751,760,761,773,804,
            505,605,606,607,608,609,610,611,612,613,
            614,583,579,580,581,582,584,493,769,602,
            768,585,586,587,588,589,590,591,592,593,
            594,595,596,597,598,599,600,601,603,604,
            574,578,577,576,575,767,805,806,771,801,
            744,782,783,759,764,766,743,746,747,770,
            772,753,750,752,754,755,756,757,758,762,
            763,765,745,748,749,751,760,761,773,804,
            505,605,606,607,608,609,610,611,612,613,
            614,583,579,580,581,582,584,728,740,602,
            739,585,586,587,588,589,590,591,592,593,
            594,595,596,597,598,599,600,601,603,604,
            574,578,577,576,575,738,571,572,472,568,
            714,569,570,730,735,737,713,716,717,741,
            742,723,720,722,724,725,726,727,729,733,
            734,736,715,718,719,721,731,732,505,605,
            606,607,608,609,610,611,612,613,614,583,
            579,580,581,582,584,728,740,602,739,585,
            586,587,588,589,590,591,592,593,594,595,
            596,597,598,599,600,601,603,604,574,578,
            577,576,575,738,571,572,481,568,714,569,
            570,730,735,737,713,716,717,741,742,723,
            720,722,724,725,726,727,729,733,734,736,
            715,718,719,721,731,732,505,605,606,607,
            608,609,610,611,612,613,614,583,579,580,
            581,582,584,697,709,602,708,585,586,587,
            588,589,590,591,592,593,594,595,596,597,
            598,599,600,601,603,604,574,578,577,576,
            575,707,571,572,711,568,685,569,570,699,
            704,706,684,686,687,710,712,692,689,691,
            693,694,695,696,698,702,703,705,426,563,
            688,690,700,701,60,605,606,607,608,609,
            610,611,612,613,614,583,579,580,581,582,
            584,668,680,602,679,585,586,587,588,589,
            590,591,592,593,594,595,596,597,598,599,
            600,601,603,604,574,578,577,576,575,678,
            789,790,682,786,655,57,62,670,675,677,
            654,657,658,681,683,663,660,662,664,665,
            666,667,669,673,674,676,656,787,659,661,
            671,672,792,791,505,605,606,607,608,609,
            610,611,612,613,614,583,579,580,581,582,
            584,697,709,602,708,585,586,587,588,589,
            590,591,592,593,594,595,596,597,598,599,
            600,601,603,604,574,578,577,576,575,707,
            571,572,711,568,685,569,570,699,704,706,
            684,686,687,710,712,692,689,691,693,694,
            695,696,698,702,703,705,454,564,688,690,
            700,701,505,605,606,607,608,609,610,611,
            612,613,614,583,579,580,581,582,584,668,
            680,602,679,585,586,587,588,589,590,591,
            592,593,594,595,596,597,598,599,600,601,
            603,604,574,578,577,576,575,678,571,572,
            682,568,655,569,570,670,675,677,654,657,
            658,681,683,663,660,662,664,665,666,667,
            669,673,674,676,656,505,659,661,671,672,
            53,375,606,607,608,609,610,611,612,613,
            614,583,579,580,581,582,584,355,630,470,
            447,585,586,587,588,589,590,591,592,593,
            594,595,596,597,598,599,600,601,603,604,
            574,578,577,576,575,453,571,572,380,568,
            468,569,570,441,469,475,623,628,629,814,
            448,635,413,408,636,401,632,633,627,808,
            809,631,465,625,505,504,505,100,812,17,
            605,606,607,608,609,610,611,612,613,614,
            583,579,580,581,582,584,444,121,602,505,
            585,586,587,588,589,590,591,592,593,594,
            595,596,597,598,599,600,601,603,604,574,
            578,577,576,575,308,605,606,607,608,609,
            610,611,612,613,614,583,579,580,581,582,
            584,505,505,602,505,585,586,587,588,589,
            590,591,592,593,594,595,596,597,598,599,
            600,601,603,604,574,578,577,576,575,505,
            331,133,505,505,505,44,505,505,505,505,
            583,579,580,581,582,584,483,505,602,641,
            585,586,587,588,589,590,591,592,593,594,
            595,596,597,598,599,600,601,603,604,574,
            578,577,576,575,505,605,606,607,608,609,
            610,611,612,613,614,619,615,616,617,618,
            620,39,605,606,607,608,609,610,611,612,
            613,614,619,615,616,617,618,620,36,605,
            606,607,608,609,610,611,612,613,614,483,
            505,605,606,607,608,609,610,611,612,613,
            614,148,605,606,607,608,609,610,611,612,
            613,614,46,605,606,607,608,609,610,611,
            612,613,614,132,505,97,505,27,26,505,
            505,505,505,489,505,505,505,505,505,505,
            497,640,365,642,807,807,491,45,605,606,
            607,608,609,610,611,612,613,614,505,605,
            606,607,608,609,610,611,612,613,614,48,
            605,606,607,608,609,610,611,612,613,614,
            47,605,606,607,608,609,610,611,612,613,
            614,50,605,606,607,608,609,610,611,612,
            613,614,49,605,606,607,608,609,610,611,
            612,613,614,19,505,31,505,505,25,505,
            53,505,30,505,505,129,119,505,505,505,
            505,807,505,505,650,807,651,505,505,505,
            505,647,505,648,505,505,644,505,645,505,
            505,505,505,505,505,505,505,505,505,571,
            572,652,568,797,569,570,571,572,649,568,
            797,569,570,646,810,811,359,643,505,479
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 51,
           NT_OFFSET         = 80,
           LA_STATE_OFFSET   = 814,
           MAX_LA            = 1,
           NUM_RULES         = 309,
           NUM_NONTERMINALS  = 51,
           NUM_SYMBOLS       = 131,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 310,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 81,
           ACCEPT_ACTION     = 504,
           ERROR_ACTION      = 505;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
